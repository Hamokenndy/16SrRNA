###三代测序hifi结果的培养组学分析流程（改良版）
#作者：谢子杰（hamohello@163.com）
#本流程主要在linux系统中运行,流程运行所需的包和软件均在附件中提供
#各种所需文件的格式也可参考附件
#请注意在运行每个单独的命令前使用help文件查看每一参数意义，根据实际需求更改

###1. 所需软件安装
##1.1 安装conda环境
wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash Miniconda3-latest-Linux-x86_64.sh ##一直按enter，直到要求输入yes
rm Miniconda3-latest-Linux-x86_64.sh
source ~/.bashrc ##更新环境变量
##1.2 安装culturome环境
wget -c http://210.75.224.110/db/conda/culturome_line.tar.gz
mv culturome_line.tar.gz culturome.tar.gz # 将安装包重命名为culturome, 之前为culturome_line
conda info --envs # 检查conda base环境的位置，一般默认安装在`~/`目录下，不在该目录下则需要手动修改后续路径
mkdir -p ~/miniconda3/envs/culturome # 创建目录，作为culture的安装位置
tar -xvzf culturome.tar.gz -C ~/miniconda3/envs/culturome
#若wget一直失败，可以找我要压缩包
conda activate culturome #成功之后（base）变成了（culturome）
conda unpack # 环境初始化
## 1.3 安装Culturome分析管道
rm culturome.tar.gz #删除culturome依赖的软件安装包（必须删除，否则后面安装会报错）
wget -c http://210.75.224.110/db/Culturome.tar.gz
tar xvzf Culturome.tar.gz
cp -f Culturome/mac/*  Culturome/script/
chmod +x  Culturome/script/*
echo export PATH=`pwd`/Culturome/script:\$PATH >> ~/.zshrc # 激活环境，如果后续流程报错，建议先echo $PATH检查全局变量是否完整配置
source ~/.zshrc
##1.4 安装所需软件
conda activate culturome
conda install -c bioconda pbh5tools bam2fastx  #下载PacBio
conda install -c bioconda vsearch   #下载vsearch
#手动将rename.py上传到script文件夹下
chmod 777 renamed.py ##给予rename.py 可以执行的权限

###2. 数据预处理
##2.1 将PacBio下机数据从bam文件转换成fastq文件
mkdir ~/training/data/ #建立储藏数据文件夹，自行上传数据
mkdir ~/training/tmp/  #建立储藏中间结果的文件夹
mkdir ~/training/result/ #建立储存最终结果的文件夹
bam2fastq -o ~/training/data/xzj.fq ~/training/data/hifi_reads.bam  
#使用PicBio官方软件将bam文件转化成fq.gz文件
##2.2 mapping文件的准备与修改
write_mapping_file.pl -i ~/training/data/barcodeF96.txt -b ~/training/data/barcodeR48.txt \
        -F GTGYCAGCMGCCGCGGTAA -R CCGYCAATTYMTTTRAGTTT \
        -L E1 -p 60 -v Rhizosphere -c Root -m TSB -B 1 -s Bean -d WildType \
        -o ~/training/data/mapping.txt; done #使用代码生产mapping文件,参数需要根据自己的实际情况修改
#具体的格式可以参考附件
validate_mapping_file.py -m ~/training/data/mapping.txt -o ~/training/tmp/ 
#检查mapping文件，注意此程序并不会帮助修改mapping文件
##2.3 barcode的提取与序列的重命名
extract_barcodes.py -f ~/training/data/xzj.fq -m ~/training/data/mapping.txt \
    	  -c barcode_paired_stitched \
    	  --bc1_len 15 --bc2_len 15 \
    	  -a --rev_comp_bc2 \
    	  -o ~/training/tmp/ #从序列中提取barcode，参数需要根据实际情况修改
./renamed.py -f ~/training/tmp/reads.fastq -b ~/training/tmp/barcodes.fastq \
        -m ~/training/data/mapping.txt -o ~/training/tmp/
        #修改序列名字为对应位置
cut -f 1 -d ' ' ~/training/tmp/reads_renamed.fastq | sed 's/_/./' >> ~/training/tmp/reads_dealed.fastq
#将序列名字格式改为vsearch可以识别的格式

###3. 挑选代表序列
##3.1 切除引物
vsearch --fastx_filter ~/training/tmp/reads_dealed.fastq  --fastq_stripleft 30  \ 
        --fastq_stripright 30 --fastq_qmax 93 
        --fastaout ~/training/tmp/filtered.fastq
#使用vsearch将引物从序列上切除
##3.2 计算每个序列出现频率，去除其中低丰度序列
vsearch --derep_fulllength ~/training/tmp/filtered.fastq --relabel Uni --minuniquesize 10 \ 
        --sizeout --output ~/training/tmp/uniques.fastq
        ##这一步或许可以不要？三代测序读长太长出现错误的可能性极大
##3.3 采用unoise3算法去噪，鉴定ASV
 vsearch --cluster_unoise ~/training/tmp/uniques.fastq --minsize 10 \
      --centroids ~/training/tmp/Zotus.fastq
##3.4 从头去除嵌合体
vsearch --uchime3_denovo ~/training/tmp/Zotus.fastq \ 
        --relabel ASV_ --nonchimeras ~/training/result/ASV.fastq

###4. 物种鉴定
##4.1 构建ASV表
vsearch --usearch_global ~/training/tmp/filtered.fastq \ 
--db ~/training/result/ASV.fastq --otutabout ~/training/tmp/ASV_table.txt --id 0.97
##4.2 控制假阳性率
negative_threshold.R --input ~/training/tmp/ASV_table.txt --metadata ~/training/data/mapping.txt |
    --threshold 1 --negative A12 --positive B12 --output ~/training/result/fdr.txt
#计算样阴、阳性对照的数据量，确定过滤假阳性的阈值
otutab_trim.R --input ~/training/tmp/ASV_table.txt --min_sample_size `cat ~/training/result/fdr.txt` \ 
    --output ~/training/result/ASV_table.txt
#过滤潜在假阳性孔
head -n1 ~/training/result/ASV_table.txt  | cut -f2- |  sed 's/\t/\n/g' | cut -c1-5 | sort | \
    uniq -c | sort -k1,1n > ~/training/result/plate_positive.count
cat ~/training/result/plate_positive.count
#统计每个板中阳性孔数量

###5. 物种注释
vsearch --sintax ~/training/result/ASV.fastq --db ~/microbiome/Culturome/db/rdp_16s_v16_sp.fa \ 
    --tabbedout ~/training/tmp/ASV.fa.tax --sintax_cutoff 0.6
#基于RDP训练集16，置信度阈值0.6.
 cut -f 1,4 ~/training/tmp/ASV.fa.tax | sed 's/\td/\tk/;s/:/__/g;s/,/;/g;s/"//g;s/\/Chloroplast//' \ 
    > ~/training/result/taxonomy_2.txt
awk 'BEGIN{OFS=FS="\t"} {delete a; a["k"]="Unassigned";a["p"]="Unassigned";a["c"]="Unassigned";a["o"]="Unassigned";a["f"]="Unassigned";a["g"]="Unassigned";a["s"]="Unassigned"; split($2,x,";");for(i in x){split(x[i],b,"__");a[b[1]]=b[2];} print $1,a["k"],a["p"],a["c"],a["o"],a["f"],a["g"],a["s"];}' \ 
    ~/training/result/taxonomy_2.txt | sed '1 i #OTU ID\tKingdom\tPhylum\tClass\tOrder\tFamily\tGenus\tSpecies' |sed 's/#//g;s/ //g' > ~/training/result/taxonomy_8.txt
#制作2列，8列的物种注释表
awk 'BEGIN{FS=OFS="\t"} NR==FNR{a[$1]=$7} NR>FNR{print $0,a[$1]}' ~/training/result/taxonomy_8.txt ~/training/result/ASV_table.txt | \ 
    sed '/\t$/d' | sed '1 s/Genus/KO/' > ~/training/result/ASV_table7.txt
 mat_gene2ko.R -i ~/training/result/ASV_table7.txt -n 100 -o ~/training/result/genus
 #ASV表按属合并

###6. 鉴定ASV的高纯度菌孔
identify_isolate.R --input ~/training/result/ASV_table.txt --genus ~/training/result/genus.count \ 
--taxonomy ~/training/result/taxonomy_8.txt --output ~/training/result/isolate
#结果解释如下
- "ASV/G属纯度分布`result/isolate.Distribution.pdf/png`"
- "稀释曲线`result/isolate_rare_curve.pdf/png`"
- "孔列表`result/isolate_well.txt`"
- "ASV 列表`result/isolate_ASV.txt`"

###7. 培养菌进化分支树
graphlan_prepare.R --input ~/training/result/ASV_table.txt --taxonomy ~/training/result/taxonomy_8.txt \ 
    --abundance 0 --number 150 --output ~/training/result/graphlan/
#准备graphlan输入文件
graphlan_plot.sh -i ~/microbiome/Culturome/ -o ~/training/result/graphlan/








